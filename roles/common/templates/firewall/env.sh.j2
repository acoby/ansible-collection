#!/bin/bash
# {{ ansible_managed }}

{% if firewall_enabled|bool %}
{% if 'proxmox' in group_names or 'storage' in group_names %}
# acoby-firewall is disabled by Ansible
exit
{% else %}
# acoby-firewall is enabled by Ansible
{% endif %}
{% else %}
# acoby-firewall is disabled by Ansible
exit
{% endif %}

shopt -s nullglob
shopt -s dotglob

BASE_PATH=/etc/network/firewall

cat_all_files_in_dir() {
  local DIR=$1
  local EXT=$2
  local chk_files=(${DIR}/*.${EXT})

{% raw %}
  if (( ${#chk_files[*]} )); then
    for file in "$DIR/*.$EXT"; do
      cat $file
    done
  fi
{% endraw %}
}

start_nat() {
  filter=$(cat_all_files_in_dir "$BASE_PATH/nat.v4.d" "v4")
  if [[ ! -z "$filter" ]]; then
    echo "Enabling IPv4 NAT rules"
    echo "$filter" | iptables-restore -n
  fi

  filter=$(cat_all_files_in_dir "$BASE_PATH/nat.v6.d" "v6")
  if [[ ! -z "$filter" ]]; then
    echo "Enabling IPv6 NAT rules"
    echo "$filter" | ip6tables-restore -n
  fi
}

start_filter() {
  filter=$(cat_all_files_in_dir "$BASE_PATH/filter.v4.d" "v4")
  if [[ ! -z "$filter" ]]; then
    echo "Enabling IPv4 Filter rules"
    echo "$filter" | iptables-restore -n
  fi

  filter=$(cat_all_files_in_dir "$BASE_PATH/filter.v6.d" "v6")
  if [[ ! -z "$filter" ]]; then
    echo "Enabling IPv6 Filter rules"
    echo "$filter" | ip6tables-restore -n
  fi
}

stop_filter() {
  echo "Flushing chains"
  # flush all chains
  iptables -F INPUT
  ip6tables -F INPUT
  iptables -F DOCKER-INPUT
  ip6tables -F DOCKER-INPUT

  # reset chain default behaviour to accept
  iptables -P INPUT ACCEPT
  ip6tables -P INPUT ACCEPT
  iptables -P FORWARD ACCEPT
  ip6tables -P FORWARD ACCEPT
  iptables -P OUTPUT ACCEPT
  ip6tables -P OUTPUT ACCEPT
}

status() {
  iptables -L -n -x -v
  ip6tables -L -n -x -v
}

case "$1" in
  start)
    start_nat
    start_filter
    ;;
  stop)
    stop_filter
    ;;
  status)
    status
    ;;
  restart)
    stop_filter
    start_nat
    start_filter
    ;;
  *)
    echo "Use $0 start|stop|restart"
    ;;
esac

shopt -u nullglob
shopt -u dotglob

#eof