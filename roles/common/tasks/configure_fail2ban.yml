---
- name: "Define Ignore-Networks"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: []

- name: "Add PAN IPv4 network to ignore list"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: "{{ fail2ban_ignore_ips + [inventory.network.pan.ipv4] }}"
  when:
    - "inventory is defined"
    - "inventory.network is defined"
    - "inventory.network.pan is defined"
    - "inventory.network.pan.ipv4 is defined"

- name: "Add PAN IPv6 network to ignore list"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: "{{ fail2ban_ignore_ips + [inventory.network.pan.ipv6] }}"
  when:
    - "inventory is defined"
    - "inventory.network is defined"
    - "inventory.network.pan is defined"
    - "inventory.network.pan.ipv6 is defined"

- name: "Add LAN IPv4 network to ignore list"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: "{{ fail2ban_ignore_ips + [inventory.network.lan.ipv4] }}"
  when:
    - "inventory is defined"
    - "inventory.network is defined"
    - "inventory.network.lan is defined"
    - "inventory.network.lan.ipv4 is defined"

- name: "Add LAN IPv6 network to ignore list"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: "{{ fail2ban_ignore_ips + [inventory.network.lan.ipv6] }}"
  when:
    - "inventory is defined"
    - "inventory.network is defined"
    - "inventory.network.lan is defined"
    - "inventory.network.lan.ipv6 is defined"

- name: "Add WAN IPv4 address to ignore list"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: "{{ fail2ban_ignore_ips + [hostvars[__host].network.wan.ipv4.address] }}"
  loop: "{{ groups['all'] }}"
  loop_control:
    loop_var: __host
  when:
    - "__host != inventory_hostname"
    - "hostvars[__host].network is defined"
    - "hostvars[__host].network.wan is defined"
    - "hostvars[__host].network.wan.ipv4 is defined"

- name: "Add WAN IPv4 subnet to ignore list"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: "{{ fail2ban_ignore_ips + hostvars[__host].network.wan.ipv4.subnet }}"
  loop: "{{ groups['all'] }}"
  loop_control:
    loop_var: __host
  when:
    - "hostvars[__host].network is defined"
    - "hostvars[__host].network.wan is defined"
    - "hostvars[__host].network.wan.ipv4 is defined"
    - "hostvars[__host].network.wan.ipv4.subnet is defined"

- name: "Add WAN IPv6 address to ignore list"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: "{{ fail2ban_ignore_ips + [hostvars[__host].network.wan.ipv6.address] }}"
  loop: "{{ groups['all'] }}"
  loop_control:
    loop_var: __host
  when:
    - "__host != inventory_hostname"
    - "hostvars[__host].network is defined"
    - "hostvars[__host].network.wan is defined"
    - "hostvars[__host].network.wan.ipv6 is defined"

- name: "Add WAN IPv6 subnet to ignore list"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: "{{ fail2ban_ignore_ips + hostvars[__host].network.wan.ipv6.subnet }}"
  loop: "{{ groups['all'] }}"
  loop_control:
    loop_var: __host
  when:
    - "hostvars[__host].network is defined"
    - "hostvars[__host].network.wan is defined"
    - "hostvars[__host].network.wan.ipv6 is defined"
    - "hostvars[__host].network.wan.ipv6.subnet is defined"

- name: "Add additional networks to ignore list"
  ansible.builtin.set_fact:
    fail2ban_ignore_ips: "{{ fail2ban_ignore_ips + [__network.range] }}"
  loop: "{{ inventory.networks | default([]) }}"
  loop_control:
    loop_var: __network
  when:
    - "inventory is defined"
    - "inventory.networks is defined"
    - "not __network.deleted | bool"

- name: "Configure Fail2Ban"
  ansible.builtin.template:
    src: "{{ template.src }}"
    dest: "{{ template.dest }}"
    owner: "{{ template.owner | default('root') }}"
    group: "{{ template.group | default('root') }}"
    mode: "{{ template.mode | default('0644') }}"
  loop:
    - src: "fail2ban/fail2ban.local.j2"
      dest: "/etc/fail2ban/fail2ban.local"
    - src: "fail2ban/jail.local.j2"
      dest: "/etc/fail2ban/jail.local"
    - src: "fail2ban/action.d/sendmail-common.conf.j2"
      dest: "/etc/fail2ban/action.d/sendmail-common.local"
    - src: "fail2ban/action.d/sendmail-whois.conf.j2"
      dest: "/etc/fail2ban/action.d/sendmail-whois.local"
    - src: "fail2ban/action.d/ip-blacklist.conf.j2"
      dest: "/etc/fail2ban/action.d/ip-blacklist.conf"
    - src: "fail2ban/action.d/ip-blacklist-v6.conf.j2"
      dest: "/etc/fail2ban/action.d/ip-blacklist-v6.conf"
    - src: "fail2ban/filter.d/ip-blacklist.conf.j2"
      dest: "/etc/fail2ban/filter.d/ip-blacklist.conf"
    - src: "fail2ban/filter.d/ip-blacklist.conf.j2"
      dest: "/etc/fail2ban/filter.d/ip-blacklist.conf"
    - src: "fail2ban/jail.d/ip-blacklist.conf.j2"
      dest: "/etc/fail2ban/jail.d/ip-blacklist.conf"
    - src: "fail2ban/jail.d/sshd-jail.conf.j2"
      dest: "/etc/fail2ban/jail.d/sshd.conf"
    - src: "fail2ban/fail2ban-report.j2"
      dest: "/usr/local/sbin/fail2ban-report"
      mode: "0700"
  loop_control:
    loop_var: template
    label: "{{ template.src }}"
  notify: "Restart Fail2Ban"

- name: "Configure Fail2Ban Blacklist Masks"
  ansible.builtin.template:
    src: "fail2ban/filter.d/ip-blacklist-mask.conf.j2"
    dest: "/etc/fail2ban/filter.d/ip-blacklist{{ item.mask }}.conf"
    owner: "root"
    group: "root"
    mode: "0644"
  loop:
    - mask: 8
    - mask: 16
    - mask: 24
    - mask: 32
    - mask: 64
    - mask: 80
    - mask: 96
    - mask: 128
  notify: "Restart Fail2Ban"

- name: "Check IP Blacklist status"
  ansible.builtin.stat:
    path: "/etc/fail2ban/ip.blacklist"
  register: ip_blacklist

- name: "Generate IP Blackist, if it not already exists"
  ansible.builtin.file:
    path: "/etc/fail2ban/ip.blacklist"
    state: "touch"
    owner: "root"
    group: "root"
    mode: "0644"
  when: "not ip_blacklist.stat.exists"
