---
- name: "Define NFS main server"
  ansible.builtin.set_fact:
    nfs_server: "{{ groups['nfs'] | sort | first }}"

- name: "Define standard facts for NFS mounts"
  ansible.builtin.set_fact:
    nfs_host: "{{ hostvars[nfs_server].network.wan.fqdn }}"
    nfs_opts: "rw,nosuid,intr,noatime,noauto,_netdev,vers=4.2,x-systemd.automount,x-systemd.requires=network-online.target"

- name: "Define PAN specific facts for NFS mounts"
  ansible.builtin.set_fact:
    nfs_host: "{{ hostvars[nfs_server].network.pan.fqdn }}"
    nfs_opts: "rw,nosuid,intr,noatime,noauto,_netdev,vers=4.2,x-systemd.automount,x-systemd.requires=wg-quick@{{ network.pan.interface }}.service"
  when:
    - "use_pan_fqdn | bool"

- name: "Install NFS client"
  ansible.builtin.apt:
    name: "{{ default_nfs_client_packages }}"
    state: "present"

- name: "Add NFS Mount Point"
  ansible.posix.mount:
    src: "{{ nfs_host }}:{{ nfs_share.path }}"
    path: "{{ nfs_share.mountpoint }}"
    fstype: "nfs4"
    opts: "{{ nfs_opts }}"
    state: "mounted"
  loop: "{{ hostvars[nfs_server].exports | default([]) }}"
  loop_control:
    loop_var: nfs_share
  when:
    - "nfs_server is defined"
    - "nfs_share.name not in disable_nfs_share | default([])"
    - "nfs_share.mountpoint is defined"
  ignore_errors: "{{ inventory.id is not defined }}"

- name: "Check if RPCBind Service Exists"
  ansible.builtin.stat:
    path: "/etc/init.d/rpcbind"
  register: rpcbind_service_status
  ignore_errors: "{{ inventory.id is not defined }}"

- name: "Stop RPC Bind"
  when:
    - "rpcbind_service_status.stat.exists"
  block:
    - name: "Stop RPC Bind Init Service"
      ansible.builtin.systemd:
        name: "rpcbind"
        state: "stopped"
        enabled: false
      ignore_errors: "{{ inventory.id is not defined }}"

    - name: "Stop RPC Bind Socket Init Service"
      ansible.builtin.systemd:
        name: "rpcbind.socket"
        state: "stopped"
        enabled: false
      ignore_errors: "{{ inventory.id is not defined }}"
