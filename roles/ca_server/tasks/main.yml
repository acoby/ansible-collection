# generates ca
---

- name: "Install OpenSSL"
  become: true
  ansible.builtin.apt:
    name: "python3-openssl"
  tags:
    - ca_server

- name: "Set facts"
  ansible.builtin.set_fact:
    service_ca:
      base: "{{ inventory.ca.base | default(ca_base) }}"
      common_name: "{{ inventory.ca.common_name | default(ca_common_name) }}"
      country_name: "{{ inventory.ca.country | default(ca_country_name) }}"
      state_or_province_name: "{{ inventory.ca.state | default(ca_state_or_province_name) }}"
      locality_name: "{{ inventory.ca.locality | default(ca_locality_name) }}"
      organization_name: "{{ inventory.ca.organization | default(ca_organization_name) }}"
      organizational_unit_name: "{{ inventory.ca.organizational_unit | default(ca_organizational_unit_name) }}"
      email_address: "{{ inventory.ca.email | default(ca_email_address) }}"
  tags:
    - ca_server

- name: "Define locations"
  ansible.builtin.set_fact:
    ca_pwd_file: "{{ service_ca.base }}/private/.password"
    ca_key_file: "{{ service_ca.base }}/private/ca.key"
    ca_csr_file: "{{ service_ca.base }}/csr/ca.csr"
    ca_crt_file: "{{ service_ca.base }}/certs/ca.crt"
    ca_pfx_file: "{{ service_ca.base }}/pfx/ca.pfx"
  tags:
    - ca_server

- name: "Create directory for acoby root CA"
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "root"
    group: "root"
    mode: "0700"
    state: directory
  loop:
    - "{{ service_ca.base }}"
    - "{{ service_ca.base }}/private"
    - "{{ service_ca.base }}/pfx"
    - "{{ service_ca.base }}/csr"
    - "{{ service_ca.base }}/certs"
  tags:
    - ca_server

- name: "Check if Certificate file exists"
  become: true
  ansible.builtin.stat:
    path: "{{ ca_crt_file }}"
  register: _ca_cert_file
  tags:
    - ca_server

- name: "Check if a Certificate is still valid, ignoring failures"
  become: true
  community.crypto.x509_certificate_info:
    path: "{{ ca_crt_file }}"
  ignore_errors: true
  register: _ca_cert_file_validity_check
  when: "_ca_cert_file.stat.exists"
  tags:
    - ca_server

- name: "Remove key, if certificate is not valid"
  become: true
  ansible.builtin.file:
    path:
      - "{{ ca_key_file }}"
      - "{{ ca_pwd_file }}"
    state: absent
  when: "_ca_cert_file.stat.exists and _ca_cert_file_validity_check.expired"
  tags:
    - ca_server

- name: "Generate certificate authority"
  ansible.builtin.include_tasks: generate_ca.yml
  args:
    apply:
      become: true
      tags:
        - ca_server
  when:
    - "not _ca_cert_file.stat.exists or _ca_cert_file_validity_check.expired"
  tags:
    - ca_server

- name: "Fetch the root-ca certificate"
  become: true
  ansible.builtin.fetch:
    src: "{{ ca_crt_file }}"
    dest: "fetch/ca.crt"
    flat: "yes"
  tags:
    - ca_server
